import fs from 'fs';
import path from 'path';
import type { Vehicle } from '@/types/vehicle';
import { fetchFotosCsv, fetchVehiculosCsv, type FotoRow, type VehiculoRow } from '@/lib/sheet-photos';
import { buildImageSet } from '@/lib/gdrive';
import { getLocalVehicles, getLocalSlugs, getLocalVehicleBySlug } from './local';

const ROOT = process.cwd();
const LOCAL_JSON = path.join(ROOT, 'src/data/vehicles.local.json');

// Funciones de utilidad para procesar datos
function parseNumber(value: string): number | null {
  if (!value || value.trim() === '') return null;
  const num = parseFloat(value.replace(/[^\d.-]/g, ''));
  return isNaN(num) ? null : num;
}

function parseBoolean(value: string): boolean {
  if (!value || value.trim() === '') return false;
  const lower = value.toLowerCase().trim();
  return lower === 's√≠' || lower === 'si' || lower === 'yes' || lower === 'true' || lower === '1';
}

function processField(value: string, defaultValue: string = 'No disponible'): string {
  return value && value.trim() !== '' ? value.trim() : defaultValue;
}

function slugify(brand: string, model: string, year: string|number, version?: string) {
  const parts = [brand, model, year.toString()];
  if (version && version !== 'No disponible') parts.push(version);
  return parts.join('-').toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-');
}

async function fetchVehiclesFromSheet(): Promise<Vehicle[]> {
  try {
    const [vehiculosData, fotosData] = await Promise.all([
      fetchVehiculosCsv(),
      fetchFotosCsv()
    ]);

    const vehicles: Vehicle[] = [];
    let idCounter = 1;

    for (const vehiculo of vehiculosData) {
      // Saltar filas vac√≠as
      if (!vehiculo.Marca || !vehiculo.Modelo || !vehiculo.A√±o) continue;

      // Buscar fotos correspondientes
      const fotos = fotosData.find(f => 
        f.Marca === vehiculo.Marca && 
        f.Modelo === vehiculo.Modelo && 
        f.A√±o === vehiculo.A√±o &&
        f.Versi√≥n === vehiculo.Versi√≥n
      );

      // Procesar im√°genes en orden espec√≠fico
      const imageSet = {
        lateral: fotos?.Lateral || '',
        frontal: fotos?.Frontal || '',
        posterior: fotos?.Posterior || '',
        tablero: fotos?.Tablero || '',
        asientos: fotos?.Asientos || ''
      };

      const images = buildImageSet(vehiculo.Marca, vehiculo.Modelo, parseInt(vehiculo.A√±o), imageSet);
      const primaryImage = images.length > 0 ? images[0].url : '/placeholder-car.webp';

      // Procesar datos num√©ricos
      const price = parseNumber(vehiculo.Precio);
      const kilometers = parseNumber(vehiculo.Kilometraje);
      let owners = parseNumber(vehiculo.Due√±os) || 1;
      if (owners === 0) owners = 1; // Asegurar al menos 1 due√±o

      const vehicle: Vehicle = {
        id: idCounter++,
        slug: slugify(vehiculo.Marca, vehiculo.Modelo, vehiculo.A√±o, vehiculo.Versi√≥n),
        brand: vehiculo.Marca,
        model: vehiculo.Modelo,
        version: processField(vehiculo.Versi√≥n),
        year: parseInt(vehiculo.A√±o) || new Date().getFullYear(),
        price: price,
        kilometers: kilometers,
        transmission: processField(vehiculo.Transmisi√≥n, 'Manual'),
        fuel: processField(vehiculo.Combustible, 'Bencina'),
        region: processField(vehiculo.Ubicaci√≥n, 'No disponible'),
        image: primaryImage,
        images: images || [],
        publishedAt: new Date().toISOString().split('T')[0],
        owners: owners,
        color: processField(vehiculo.Color),
        status: processField(vehiculo.Estado),
        
        // Especificaciones t√©cnicas
        engine: processField(vehiculo.Motor),
        power: processField(vehiculo.Potencia),
        consumption: processField(vehiculo.Consumo),
        emissions: processField(vehiculo.Emisiones),
        
        // Caracter√≠sticas de seguridad
        abs: parseBoolean(vehiculo.ABS),
        esp: parseBoolean(vehiculo.ESP),
        airbags: processField(vehiculo.Airbags),
        tractionControl: parseBoolean(vehiculo['Control de tracci√≥n']),
        
        // Caracter√≠sticas de confort
        airConditioning: parseBoolean(vehiculo['Aire acondicionado']),
        powerSteering: parseBoolean(vehiculo['Direcci√≥n asistida']),
        electricWindows: parseBoolean(vehiculo['Alzavidrios el√©ctricos']),
        electricMirrors: parseBoolean(vehiculo['Espejos el√©ctricos']),
        audioSystem: parseBoolean(vehiculo['Sistema de audio']),
        bluetooth: parseBoolean(vehiculo.Bluetooth),
        usb: parseBoolean(vehiculo.USB),
        cruiseControl: parseBoolean(vehiculo['Control crucero']),
        
        // V√≠nculo
        link: vehiculo.V√≠nculo && vehiculo.V√≠nculo.trim() !== '' ? vehiculo.V√≠nculo : undefined
      };

      vehicles.push(vehicle);
    }

    console.log(`‚úÖ Cargados ${vehicles.length} veh√≠culos desde Google Sheet`);
    return vehicles;
  } catch (error) {
    console.error('Error fetching vehicles from Google Sheet:', error);
    return [];
  }
}

// Funci√≥n mock vac√≠a (no se usa si hay locales o Sheet)
async function getMockVehicles(): Promise<Vehicle[]> {
  return [];
}

/**
 * Obtiene todos los veh√≠culos con prioridad: locales ‚Üí Sheet ‚Üí mock vac√≠o
 */
export async function getVehicles(): Promise<Vehicle[]> {
  console.log('üîç getVehicles: Iniciando carga de veh√≠culos...');
  
  // 1. Intentar cargar datos locales primero
  console.log('üîç getVehicles: Intentando cargar datos locales...');
  const localVehicles = await getLocalVehicles();
  // En producci√≥n o con FORCE_LOCAL, usar siempre los locales
  const forceLocal = process.env.FORCE_LOCAL === '1';
  if (process.env.NODE_ENV === 'production' || forceLocal) {
    return localVehicles;
  }
  console.log(`üîç getVehicles: Datos locales cargados: ${localVehicles.length} veh√≠culos`);
  
  if (localVehicles.length > 0) {
    console.log('‚úÖ getVehicles: Retornando veh√≠culos locales');
    return localVehicles;
  }

  // 2. Fallback: cargar desde Google Sheet
  console.log('üîç getVehicles: Intentando cargar desde Google Sheet...');
  try {
    const sheetVehicles = await fetchVehiclesFromSheet();
    console.log(`üîç getVehicles: Datos de Sheet cargados: ${sheetVehicles.length} veh√≠culos`);
    if (sheetVehicles.length > 0) {
      console.log('‚úÖ getVehicles: Retornando veh√≠culos de Sheet');
      return sheetVehicles;
    }
  } catch (error) {
    console.error('‚ùå getVehicles: Error cargando desde Google Sheet:', error);
  }

  // 3. √öltimo fallback: array vac√≠o (no usar mock)
  console.log('‚ö†Ô∏è getVehicles: No se encontraron veh√≠culos en locales ni en Sheet');
  return [];
}

/**
 * Obtiene los slugs de veh√≠culos con la misma l√≥gica de prioridad
 */
export async function getVehicleSlugs(): Promise<string[]> {
  // 1. Intentar cargar slugs locales primero
  const localSlugs = await getLocalSlugs();
  if (localSlugs.length > 0) {
    return localSlugs;
  }

  // 2. Fallback: extraer slugs desde Sheet
  try {
    const vehicles = await fetchVehiclesFromSheet();
    return vehicles.map(v => v.slug);
  } catch (error) {
    console.error('Error obteniendo slugs desde Google Sheet:', error);
  }

  // 3. √öltimo fallback: array vac√≠o
  return [];
}

/**
 * Busca un veh√≠culo espec√≠fico por slug
 */
export async function getVehicleBySlug(slug: string): Promise<Vehicle | null> {
  // 1. Buscar en datos locales primero
  const localVehicle = await getLocalVehicleBySlug(slug);
  if (localVehicle) {
    return localVehicle;
  }

  // 2. Fallback: buscar en todos los veh√≠culos (que ya incluye la l√≥gica de fallback)
  const allVehicles = await getVehicles();
  return allVehicles.find(v => v.slug === slug) || null;
}